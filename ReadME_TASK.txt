https://www.edu.goit.global/uk/learn/7349052/2294/2302/homework

Завдання 1 - бібліотека SimpleLightbox

Виконуй це завдання у файлах 01-gallery.html і 01-gallery.js. Розбий його на декілька підзавдань:

    1.1. Додай бібліотеку SimpleLightbox як залежність проекту, використовуючи npm 
    (посилання на CDN з твоєї минулої роботи більше не потрібне).
     - npm i simplelightbox  (запустити термінал встановити додаткову бібліотеку)
    1.2. Використовуй свій JavaScript код з попередньої домашньої роботи, але виконай рефакторинг з урахуванням того, 
    що бібліотека була встановлена через npm (синтаксис import/export).

    1.3. Для того щоб підключити CSS код бібліотеки в проект, необхідно додати ще один імпорт, 
    крім того, що описаний в документації.

// Описаний в документації
import SimpleLightbox from "simplelightbox";
// Додатковий імпорт стилів
import "simplelightbox/dist/simple-lightbox.min.css";


Завдання 2 - відеоплеєр

HTML містить <iframe> з відео для Vimeo плеєра. Напиши скрипт, який буде зберігати поточний час відтворення відео у локальне сховище
 і, після перезавантаження сторінки, продовжувати відтворювати відео з цього часу.

<iframe
  id="vimeo-player"
  src="https://player.vimeo.com/video/236203659"
  width="640"
  height="360"
  frameborder="0"
  allowfullscreen
  allow="autoplay; encrypted-media"
></iframe>

Виконуй це завдання у файлах 02-video.html і 02-video.js. Розбий його на декілька підзавдань:

    2.1. Ознайомся з документацією бібліотеки Vimeo плеєра. 
    - https://github.com/vimeo/player.js/#vimeo-player-api
    - https://developer.vimeo.com/player/sdk/embed
    - If you’re using a module bundler like webpack or rollup, the exported object will be the Player constructor 
    (unlike the browser where it is attached to window.Vimeo):
@vimeo/player - використовується для створення нового екземпляра програвача Vimeo, який приймає два аргументи: 
елемент iframe і об’єкт параметрів. 
Об’єкт параметрів використовується для встановлення таких властивостей програвача, як цикл, повноекранний режим і якість.

    2.2. Додай бібліотеку як залежність проекту через npm. 
      - npm install @vimeo/player (запустити термінал встановити додаткову бібліотеку)
    2.3. Ініціалізуй плеєр у файлі скрипта як це описано в секції pre-existing player, але враховуй, 
    що у тебе плеєр доданий як npm пакет, а не через CDN.
      2.3.1 - імпортуємо функцію з бібліотеки
      2.3.2. Ствоюємо посилання на необхідні об'єкти
    
      
    2.4. Вивчи документацію методу on() і почни відстежувати подію timeupdate - оновлення часу відтворення.
      https://github.com/vimeo/player.js/blob/master/README.md#onevent-string-callback-function-void
      2.4.1 Метод, який встановлює обробник подій на екземпляр програвача для події 
      timeupdate (Запускається як поточний час оновлення відео. Зазвичай він запускається кожні 250 мс, 
      але може відрізнятися залежно від браузера.). 
      Функцію throttle використовуємо для обмеження частоти викликів функції getCurrentTime.

    2.5. Зберігай час відтворення у локальне сховище. Нехай ключем для сховища буде рядок "videoplayer-current-time".
      2.5.1  Створюємо змінну, яка зберігає ім’я ключа для поточного значення часу в локальній пам’яті браузера.
      2.5.2. Створюємо функцію, яка буде приймати поточний час відео як параметр і зберігати його в локальному 
      сховищі за допомогою методу localStorage.setItem.

    2.6. Під час перезавантаження сторінки скористайся методом setCurrentTime() з метою відновлення 
    відтворення зі збереженої позиції.
      2.6.1. Створюємо метод, який встановлює поточний час відео, взяте із раніше збереженого значення (2.5.2.), 
      що зберігається в локальній пам’яті,попередньо розпарсивши його, або почне з початку (||0), якщо воно недоступне.
      2.6.2. Promises for setters are resolved with the value set, or rejected with an error if the set fails. For example:


    2.7. Додай до проекту бібліотеку lodash.throttle і зроби так, щоб час відтворення оновлювався у сховищі не частіше, ніж раз на секунду.
      - https://www.npmjs.com/package/lodash.throttle?activeTab=code - використовується для регулювання частоти викликів функції 
      getCurrentTime, яка зберігає поточний час відео в локальній пам’яті браузера.
      2.7.1 - npm i lodash.throttle - (запустити термінал встановити додаткову бібліотеку)
      2.7.2. - імпортуємо функцію з бібліотеки
getCurrentTime(): Promise<number, Error>

Get the current playback position in seconds.

player.getCurrentTime().then(function(seconds) {
    // seconds = the current playback position
}).catch(function(error) {
    // an error occurred
});




Завдання 3 - форма зворотного зв'язку

HTML містить розмітку форми. Напиши скрипт, який буде зберігати значення полів у локальне сховище, коли користувач щось друкує.

<form class="feedback-form" autocomplete="off">
  <label>
    Email
    <input type="email" name="email" autofocus />
  </label>
  <label>
    Message
    <textarea name="message" rows="8"></textarea>
  </label>
  <button type="submit">Submit</button>
</form>

Виконуй це завдання у файлах 03-feedback.html і 03-feedback.js. Розбий його на декілька підзавдань:

        
    Зроби так, щоб сховище оновлювалось не частіше, ніж раз на 500 мілісекунд. 
    3.1. Для цього додай до проекту і використовуй бібліотеку lodash.throttle.

    3.1. Підключаємо бібліотеку ("throttle") - регулює частоту викликів функції onInputData, яка зберігає введені дані.
    3.2. Отримуємо необхідні поля для роботи 

  3.3. Відстежуй на формі подію input, і щоразу записуй у локальне сховище об'єкт з полями email і message, 
    у яких зберігай поточні значення полів форми. Нехай ключем для сховища буде рядок "feedback-form-state".
    3.3.1. Вішаємо слухачів на:
    -  поле вводу "input" + функція onInputData  + (Зроби так, щоб сховище оновлювалось не частіше, ніж раз на 500 мілісекунд.)
    - кнопку "submit" + функція onFormSubmit 
    3.3.2. Створюємо змінну, яка зберігає назву ключа форми зворотного зв'язку в локальному сховищі браузера.
    3.3.3. функція onInputdataForm - заповнює пусті поля з одночасною можливістю записувати інформацію в локальне сховище:

   3.4.  Під час завантаження сторінки перевіряй стан сховища, і якщо там є збережені дані, заповнюй ними поля форми. 
    В іншому випадку поля повинні бути порожніми.
    3.4.1. створюємо подію яка отримує збережені дані, або пусті поля
    3.4.2. функція "reloadPage" - якщо не всі поля заповнені дозволяє перезавантажити сторінку

    3.5. Під час сабміту форми очищуй сховище і поля форми, а також виводь у консоль об'єкт з полями email, 
    message та їхніми поточними значеннями.
    3.5.1. Стврюємо функцію onFormSubmit . Задачі:
     - скидує поведінку за замовченням (після Submit не перевантаує сторінку)
     - перевіряємо чи всі поля заповнені інакше повертаємо попередження
     - якщо всі поля заповнені перезаписуємо дані у сховищі і виводимо інформацію у консоль
     - обнуляємо форму
